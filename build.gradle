apply plugin: 'java'
apply plugin: 'sonar-runner'

group = 'ru.naumen'
sourceCompatibility = '1.7'
targetCompatibility = '1.7'

// Install pitest plugin to measure test quality
buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.1.1'
    }
}
apply plugin: 'info.solidsoft.pitest'

def detectVersion() {
    def rawVersion = "git describe".execute().text.trim()
    def extractedVersion = rawVersion =~ /serveraccess-([0-9.]*(-[0-9]+)?)/
    return extractedVersion[0][1]
}

def currentVersion = detectVersion()

repositories {
    mavenCentral()
}

dependencies {
    compile (
        files('lib/mindterm.jar', 'lib/swt.jar'),
        'org.apache.httpcomponents:httpclient:4.2.5',
        'log4j:log4j:1.2.17',
    )
    testCompile (
        'junit:junit:4.11',
        'org.hamcrest:hamcrest-all:1.3',
    )
}

jar {
    manifest {
        attributes 'Main-Class': 'ru.naumen.servacc.ui.Main'
    }
}

sonarRunner {
    sonarProperties {
        property "sonar.jdbc.url", "jdbc:postgresql://localhost:5432/sonar"
        property "sonar.jdbc.driverClassName", "org.postgresql.Driver"
        property "sonar.projectVersion", currentVersion
    }
}

task prepareRelease(dependsOn: build) << {
    copy {
        from configurations.runtime
        into 'build/libs/lib'
        include 'log4j*.jar'
        include 'mindterm.jar'
    }
    copy {
        from 'resource/server-access'
        from 'resource/log4j.properties'
        into 'build/libs'
    }
}

task win32(dependsOn: prepareRelease) << {
    exec {
        workingDir 'nsis'
        commandLine 'makensis', '-DArch=32', '-DbuildVersion=' + currentVersion, 'serveraccess2.nsi'
        standardOutput = new FileOutputStream('build/nsis.out')
        errorOutput = new FileOutputStream('build/nsis.err')
    }
}

task win64(dependsOn: prepareRelease) << {
    exec {
        workingDir 'nsis'
        commandLine 'makensis', '-DArch=64', '-DbuildVersion=' + currentVersion, 'serveraccess2.nsi'
        standardOutput = new FileOutputStream('build/nsis.out')
        errorOutput = new FileOutputStream('build/nsis.err')
    }
}

task macosx(dependsOn: build) << {
    copy {
        from zipTree('resource/ServerAccess.app.tmpl.zip')
        into 'build/libs'
    }
    copy {
        from configurations.runtime
        into 'build/libs/ServerAccess.app/Contents/MacOS'
        include 'log4j*.jar'
        include 'mindterm.jar'
    }
    copy {
        from 'resource/log4j.properties'
        from 'build/libs/ServerAccess.jar'
        from 'resource/scripts/serveraccess'
        into 'build/libs/ServerAccess.app/Contents/MacOS'
    }
    copy {
        from 'lib/macosx/swt.jar'
        into 'build/libs/ServerAccess.app/Contents/MacOS/swt'
    }
}

// vim: set ft=groovy:
