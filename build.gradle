apply plugin: 'java'

group = 'ru.naumen'
sourceCompatibility = '1.6'
targetCompatibility = '1.6'

def detectVersion() {
    def rawVersion = "git describe".execute().text.trim()
    def extractedVersion = rawVersion =~ /serveraccess-([0-9.]*(-[0-9]+)?)/
    return extractedVersion[0][1]
}

def currentVersion = detectVersion()

dependencies {
    compile files('lib/mindterm.jar', 'lib/swt.jar', 'lib/log4j-1.2.17.jar', 'lib/junit-4.10.jar', 'lib/httpclient-4.2.5.jar', 'lib/httpcore-4.2.4.jar')
}

task mutation_coverage << {
    println "TODO: use pitest plugin"
}

task prepare_release(dependsOn: build) << {
    copy {
        from 'lib/mindterm.jar'
        from 'lib/log4j-1.2.17.jar'
        into 'build/libs/lib'
    }
    copy {
        from 'resource/server-access'
        from 'resource/log4j.properties'
        into 'build/libs'
    }
}

task win32(dependsOn: build) << {
    exec {
        workingDir 'nsis'
        commandLine 'makensis', '-DArch=32', '-DbuildVersion=' + currentVersion, 'serveraccess2.nsi'
        standardOutput = new FileOutputStream('build/nsis.out')
        errorOutput = new FileOutputStream('build/nsis.err')
    }
}

task win64(dependsOn: build) << {
    exec {
        workingDir 'nsis'
        commandLine 'makensis', '-DArch=64', '-DbuildVersion=' + currentVersion, 'serveraccess2.nsi'
        standardOutput = new FileOutputStream('build/nsis.out')
        errorOutput = new FileOutputStream('build/nsis.err')
    }
}

task macosx_cocoa_64(dependsOn: build) << {
    println "not done yet"
}

task sonar(dependsOn: build) << {
    // http://www.gradle.org/docs/current/userguide/sonar_plugin.html
    println "not done yet"
}

// vim: set ft=groovy:
