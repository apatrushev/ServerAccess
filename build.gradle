plugins {
    id 'java'
    id 'sonar-runner'
    id 'info.solidsoft.pitest' version '1.1.1'
    id 'com.github.johnrengelman.shadow' version '1.2.2'
}

group = 'ru.naumen'
sourceCompatibility = '1.8'
targetCompatibility = '1.8'

def detectVersion() {
    try {
        def rawVersion = 'git describe'.execute().text.trim()
        def extractedVersion = rawVersion =~ /serveraccess-([0-9.]*(-[0-9]+)?)/
        return extractedVersion[0][1]
    } catch (e) {
        return 'devel'
    }
}

def currentVersion = detectVersion()

repositories {
    mavenCentral()
}

dependencies {
    compile (
        files('lib/mindterm.jar', 'lib/swt.jar'),
        'org.apache.httpcomponents:httpclient:4.2.5',
        'log4j:log4j:1.2.17',
    )
    testCompile (
        'junit:junit:4.11',
        'org.hamcrest:hamcrest-all:1.3',
    )
}

jar {
    manifest {
        attributes 'Main-Class': 'ru.naumen.servacc.ui.Main'
    }
}

import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
import com.github.jengelman.gradle.plugins.shadow.internal.DefaultDependencyFilter

class ArchDependencyFilter extends DefaultDependencyFilter {
    private FileCollection exclude
    private FileCollection include
    
    ArchDependencyFilter(Project project, FileCollection exclude, FileCollection include) {
        super(project)
        this.exclude = exclude
        this.include = include
    }
    
    FileCollection resolve(Configuration configuration) {
        FileCollection fc = super.resolve(configuration)
        return (fc - this.exclude) + this.include
    }
}

task shadowJar64(type: ShadowJar) {
    configureShadowJarArch(shadowJar64, '64')
}

task shadowJar32(type: ShadowJar) {
    configureShadowJarArch(shadowJar32, '32')
}

def configureShadowJarArch(ShadowJar shadowJarArch, String arch) {
    shadowJarArch.with {
        description = "${shadowJar.description} for ${arch} platform"
        conventionMapping.with {
            map('classifier') {
                'all'
            }
        }
        destinationDir = file(shadowJar.destinationDir.getPath() + "/${arch}")
        manifest.from shadowJar.manifest
        from sourceSets.main.output
        configurations = [project.configurations.runtime.copyRecursive()]
        exclude 'META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA'
        dependencyFilter = new ArchDependencyFilter(getProject(), files('lib/swt.jar'), files("lib/win_${arch}/swt.jar"))
    }
}

sonarRunner {
    sonarProperties {
        property "sonar.jdbc.url", "jdbc:postgresql://localhost:5432/sonar"
        property "sonar.jdbc.driverClassName", "org.postgresql.Driver"
        property "sonar.projectVersion", currentVersion
    }
}

task prepareRelease {dependsOn build, shadowJar64} << {
    copy {
        from 'resource/server-access'
        from 'resource/log4j.properties'
        into 'build/libs'
    }
}

task win32 {dependsOn prepareRelease, shadowJar32} << {
    exec {
        workingDir 'nsis'
        commandLine 'makensis', '-DArch=32', '-DbuildVersion=' + currentVersion, 'serveraccess2.nsi'
        standardOutput = new FileOutputStream('build/nsis.out')
        errorOutput = new FileOutputStream('build/nsis.err')
    }
}

task win64 {dependsOn prepareRelease, shadowJar64} << {
    exec {
        workingDir 'nsis'
        commandLine 'makensis', '-DArch=64', '-DbuildVersion=' + currentVersion, 'serveraccess2.nsi'
        standardOutput = new FileOutputStream('build/nsis.out')
        errorOutput = new FileOutputStream('build/nsis.err')
    }
}

task macosx {dependsOn build, shadowJar64} << {
    copy {
        from zipTree('resource/ServerAccess.app.tmpl.zip')
        into 'build/libs'
    }
    copy {
        from configurations.runtime
        into 'build/libs/ServerAccess.app/Contents/MacOS'
    }
    copy {
        from 'resource/log4j.properties'
        from 'build/libs/64/ServerAccess-all.jar'
        from 'resource/scripts/serveraccess'
        into 'build/libs/ServerAccess.app/Contents/MacOS'
    }
    copy {
        from 'lib/macosx/swt.jar'
        into 'build/libs/ServerAccess.app/Contents/MacOS/swt'
    }
}

// vim: set ft=groovy:
