<?xml version="1.0" encoding="UTF-8"?>

<project name="ServerAccess" default="prepare-release" basedir=".">
    <taskdef
        resource="net/sf/antcontrib/antcontrib.properties">
        <classpath>
            <pathelement location="lib/ant-contrib.jar"/>
        </classpath>
    </taskdef>

    <property
        name="src"
        location="src/main/java" />
    <property
        name="testsrc"
        location="src/test/java" />
    <property
        name="build"
        location="build/classes/main" />
    <property
        name="buildt"
        location="build/classes/test" />
    <property
        name="junit.reports"
        location="build/test-results" />
    <property
        name="distr"
        location="build/libs" />
    <property
        name="debug"
        value="true" />
    <property
        name="debuglevel"
        value="lines,vars,source" />
    <property
        name="swt-version"
        value="3.7.2" />
    <property
        name="log4j-version"
        value="1.2.17"/>
    <property
        environment="env"/>
    <condition
        property="nsis_cmd"
        value="${env.ProgramFiles}\NSIS\makensis.exe"
        else="makensis">
        <os family="windows"/>
    </condition>

    <path
        id="saclient.class.path">
        <pathelement
            path="${java.class.path}/" />
        <pathelement
            path="build" />
        <pathelement location="lib/swt.jar"/>
        <pathelement location="lib/mindterm.jar"/>
        <pathelement location="lib/log4j-${log4j-version}.jar"/>
    </path>

    <path id="test.class.path">
        <pathelement location="lib/junit-4.10.jar"/>
        <pathelement location="lib/httpclient-4.2.5.jar"/>
        <pathelement location="lib/httpcore-4.2.4.jar"/>
        <pathelement location="lib/httpmime-4.2.5.jar"/>
        <pathelement location="lib/commons-logging-1.1.1.jar"/>
        <pathelement location="lib/pitest-0.30.jar"/>
        <pathelement location="lib/pitest-ant-0.30.jar"/>
    </path>

    <target
        name="prepare-release"
        depends="jar"
        description="--> collect ready-to-use app distribution">
        <copy
            file="lib/mindterm.jar"
            todir="${distr}/lib/"/>
        <copy
            file="lib/log4j-${log4j-version}.jar"
            todir="${distr}/lib/"/>
        <copy
            file="resource/server-access"
            todir="${distr}"/>
        <copy
            file="resource/log4j.properties"
            todir="${distr}"/>
        <chmod perm="a+x">
            <fileset dir="${distr}">
                <include name="server-access"/>
            </fileset>
        </chmod>
    </target>

    <target
        name="jar"
        depends="java-build,test"
        description="--> build jar">
        <jar
            destfile="${distr}/ServerAccess.jar"
            manifest="resource/MANIFEST.MF">
            <fileset dir="${build}" />
            <fileset dir="resource">
                <include name="*.ico" />
                <include name="icons/**" />
                <include name="defaults/**" />
            </fileset>
        </jar>
    </target>

    <target
        name="init">
        <mkdir dir="${build}" />
        <mkdir dir="${buildt}" />
        <mkdir dir="${junit.reports}" />
        <mkdir dir="${distr}" />
    </target>

    <target
        name="detect-version">
        <exec
            executable="git"
            outputproperty="raw.version">
            <arg line="describe"/>
        </exec>
        <propertyregex
            property="version"
            input="${raw.version}"
            regexp="serveraccess-([0-9.]*(-[0-9]+)?)"
            select="\1"/>
        <echo message="Version: ${version}"/>
    </target>

    <target
        name="win32"
        depends="jar,detect-version"
        description="--> build win32-x86 installer">

        <mkdir dir="build/swt" />
        <copy
            file="lib/win_32/swt-${swt-version}.jar"
            tofile="build/swt/swt.jar" />

        <!-- Windows users, add makensis to your PATH -->
        <exec
            executable="${nsis_cmd}"
            dir="nsis"
            resultproperty="nsis_exec_result">
            <arg line="-DBuildVersion=${version} serveraccess2.nsi" />
            <redirector>
                <outputmapper type="merge" to="build/redirector.out" />
                <errormapper type="merge" to="build/redirector.err" />
            </redirector>
        </exec>

        <delete dir="build/swt" />
        <move file="nsis/sa_install-${version}.exe" todir="build" failonerror="false"/>

        <fail message="NSIS build failed">
            <condition>
                <not>
                    <equals arg1="${nsis_exec_result}" arg2="0"/>
                </not>
            </condition>
        </fail>
    </target>

    <target
        name="win64"
        depends="jar,detect-version"
        description="--> build win32-x86_64 installer">

        <mkdir dir="build/swt" />
        <copy
            file="lib/win_64/swt-${swt-version}.jar"
            tofile="build/swt/swt.jar" />

        <!-- Windows users, add makensis to your PATH -->
        <exec
            executable="${nsis_cmd}"
            dir="nsis"
            resultproperty="nsis_exec_result">
            <arg line="-DBuildVersion=${version} serveraccess2.nsi" />
            <redirector>
                <outputmapper type="merge" to="build/redirector.out" />
                <errormapper type="merge" to="build/redirector.err" />
            </redirector>
        </exec>

        <delete dir="build/swt" />
        <move file="nsis/sa_install-${version}.exe" tofile="build/sa_install-${version}-x86_64.exe" failonerror="false"/>

        <fail message="NSIS build failed">
            <condition>
                <not>
                    <equals arg1="${nsis_exec_result}" arg2="0"/>
                </not>
            </condition>
        </fail>
    </target>

    <target
        name="java-build"
        depends="init"
        description="--> .java to build">
        <javac
            destdir="${build}"
            classpathref="saclient.class.path"
            debug="${debug}"
            debuglevel="${debuglevel}"
            includeantruntime="false"
            optimize="true">
            <src
                path="${src}" />
        </javac>
    </target>

    <target name="test-build" depends="java-build">
        <javac srcdir="${testsrc}" destdir="${buildt}" encoding="UTF-8" debug="${debug}" includeantruntime="false">
            <classpath>
                <path refid="saclient.class.path" />
                <path refid="test.class.path" />
                <pathelement location="${buildt}" />
                <pathelement location="${build}" />
            </classpath>
        </javac>
    </target>

    <target name="copy-test-resources" depends="init">
        <copy file="src/test/resources/test-config.xml" todir="${buildt}"/>
    </target>

    <target name="test" depends="java-build,test-build,copy-test-resources">
        <junit showoutput="true" failureproperty="junit.failure" fork="yes">
            <classpath>
                <path refid="test.class.path" />
                <path refid="saclient.class.path" />
                <pathelement location="${buildt}" />
                <pathelement location="${build}" />
            </classpath>
            <batchtest todir="${junit.reports}">
                <fileset dir="${testsrc}">
                    <include name="**/*Test.java" />
                </fileset>
            </batchtest>
            <formatter type="plain" usefile="false" />
            <formatter type="xml" />
        </junit>
        <fail if="junit.failure" message="Unit test(s) failed" />
    </target>

    <target
        name="clean"
        description="--> remove stuff">
        <delete dir="build" />
    </target>

    <target
        name="macosx-cocoa-x86_64"
        depends="jar"
        description="--> build Mac OS X + Cocoa x86_64 app">

        <exec executable="unzip" dir="${distr}">
            <arg value="../../resource/ServerAccess.app.tmpl.zip"/>
        </exec>

        <copy
            file="lib/mindterm.jar"
            todir="${distr}/ServerAccess.app/Contents/MacOS" />
        <copy
            file="lib/log4j-${log4j-version}.jar"
            tofile="${distr}/ServerAccess.app/Contents/MacOS/log4j.jar" />
        <copy
            file="resource/log4j.properties"
            todir="${distr}/ServerAccess.app/Contents/MacOS"/>
        <copy
            file="${distr}/ServerAccess.jar"
            todir="${distr}/ServerAccess.app/Contents/MacOS" />
        <copy
            file="resource/scripts/serveraccess"
            todir="${distr}/ServerAccess.app/Contents/MacOS" />

        <exec executable="chmod">
            <arg value="+x" />
            <arg value="${distr}/ServerAccess.app/Contents/MacOS/serveraccess" />
        </exec>
        <mkdir dir="build/swt" />
        <exec executable="unzip" dir="build/swt">
            <arg value="../../lib/swt/swt-${swt-version}-cocoa-macosx-x86_64.zip"/>
        </exec>
        <copy
            file="build/swt/swt.jar"
            todir="${distr}/ServerAccess.app/Contents/MacOS/swt" />
        <delete dir="build/swt" />
    </target>

</project>
